#!/bin/bash
set -e 

readonly UTIL_SCRIPT="__PREFIX__/bin/credential-agent/common_utils"

if [ -f $UTIL_SCRIPT ]; then
	source $UTIL_SCRIPT
	log_msg $LOG_DEBUG "Utils included"
else
	exit $CODE_IO_FAILURE
fi

declare FLAG_OPERATION=""
declare FLAG_FORCE=$FLAG_DISABLE
declare tmp_dir="__PREFIX__/tmp"
declare CRED_CONF_FILE="__PREFIX__/etc/credential_agent.ini"
declare csr_output="$tmp_dir/csr_output.txt"
declare csr_file="/opt/skc/bin/csr_file"

read_conf_file()
{
	if [ -f "$CRED_CONF_FILE" ]; then
		source $CRED_CONF_FILE
	else 
		exit_script $LOG_ERROR "Invalid configuration file path: $CRED_CONF_FILE" $CODE_IO_FAILURE
	fi
}

parse_cert_output()
{
	if [ -f "$csr_output" ]; then
		log_msg $LOG_DEBUG "file is present"
		local line=$(head -n 1 $csr_output)
		if [ "$line" = "-----BEGIN CERTIFICATE-----" ]; then
			csr_response_cert=$(cat $csr_output | sed -e 's/^.*certificate":"\(.*\)"}}/\1/'  -e 's/\\n/\n/g' >  $certificate)
		else
			response=$(<$csr_output)
			exit_script $LOG_ERROR "Command Response: $response, execution" $CODE_EXEC_ERROR
		fi
	else
		exit_script $LOG_ERROR "CSR command execution failed" $CODE_EXEC_ERROR
	fi
}

create_store_directory()
{
	local cmd="mkdir -p ${store_dir} && mkdir -p ${tmp_dir}"
	$(check_last_cmd_exec_status "$cmd" $EXEC_RULE_ABORT "Store dir genration" $CODE_OPENSSL_ERROR)
}

gen_and_get_csr_buf()
{
	local cmd="";
	local csr_content="";
	local client_root_certificate="$tmp_dir/client_certificate.pem"
	local slot=-1

	cmd="openssl genrsa -out ${certificate_key} ${keysize} &> /dev/null"
	$(check_last_cmd_exec_status "$cmd" $EXEC_RULE_ABORT "RSA Key Generation" $CODE_OPENSSL_ERROR);
	cmd="openssl req  -nodes -new -x509 -subj \"${request_params}\" -sha384 -key ${certificate_key} -out ${client_root_certificate} &> /dev/null";
	$(check_last_cmd_exec_status "$cmd" $EXEC_RULE_ABORT "Client Root Cert Generation" $CODE_OPENSSL_ERROR);
	cmd="openssl x509 -x509toreq -in ${client_root_certificate} -out ${csr} -signkey ${certificate_key} -sha384 > /dev/null";
	$(check_last_cmd_exec_status "$cmd" $EXEC_RULE_ABORT "CSR Genration Generation" $CODE_OPENSSL_ERROR)
	csr_content=$(awk '/-----BEGIN CERTIFICATE REQUEST-----/,/-----END CERTIFICATE REQUEST-----/' ${csr} | tr '\r\n' '@' | sed -e 's/@/\\n/g')
	log_msg $LOG_DEBUG "CSR Generation completed:"
	echo "$csr_content"
}

get_cert_buf()
{
	local cert_content=$(cat $certificate | tr '\r\n' '@' | sed -e 's/@/\\n/g' )
	echo "$cert_content"
}

issue_certificate()
{
	local csr_content=$(gen_and_get_csr_buf)
	local trimmed_content=$(echo $csr_content | sed '/^$/d' );

	echo $trimmed_content > $csr_file
	sed -i 's/\\n/\n/g' $csr_file
	export csr_data=`cat $csr_file`
	local issue_cert_cmd="curl -X POST -v 'https://$server:$port/cms/v1/certificates?certType=TLS-Client' \
				-H 'Content-Type: application/x-pem-file' \
				-H 'Accept: application/x-pem-file' \
				-H \"Authorization: Bearer $token\" \
				--cacert $ca_cert -d \"$csr_data\" > $csr_output"
	$(check_last_cmd_exec_status "$issue_cert_cmd" $EXEC_RULE_ABORT "CS CSR Request" $CODE_EXEC_ERROR)
	parse_cert_output 
	update_keyagent_conf
	exit_script $LOG_OK "Issue Certificate" $CODE_EXEC_SUCCESS
}

update_keyagent_conf()
{
	local cmd="";
	cmd="sed -i \"s|\(^certificate=\).*|\1${certificate}|g\" ${keyagent_conf}"
	$(check_last_cmd_exec_status "$cmd" $EXEC_RULE_ABORT "CS:Update certificate" $CODE_EXEC_ERROR)
	cmd="sed -i \"s|\(^certificate_key=\).*|\1${certificate_key}|g\" ${keyagent_conf}"
	$(check_last_cmd_exec_status "$cmd" $EXEC_RULE_ABORT "CS:Update certificate key" $CODE_EXEC_ERROR)
}

usage()
{
	log_msg $LOG_WARN "$0 [ --get-certificate ] [--force] [--verbose] \
				   [ --config <pathnanme-to-configuration-file> ]"
	exit_script $LOG_WARN "Invalid commandline args" $CODE_PARSE_ERROR
}

lock 200 $(basename $0) || exit $CODE_CONCURRENCY_ERROR
trap 'send_status' 1 2 3 6
while [ "$1" != "" ]; do
	case $1 in
		--get-certificate)
			FLAG_OPERATION="CSR"
			;;
		--force)
			FLAG_FORCE=$FLAG_ENABLE
			;;
		--verbose)
			set_log $FLAG_ENABLE
			;;
		--config)
			shift
			CRED_CONF_FILE=$1
			;;
		-h | --help)
			usage
			;;
		*)
			usage
	esac
	shift
done

read_conf_file
log_var=$(get_log)
if [[ $log_var -eq $FLAG_ENABLE ]]; then
	set_log_file "$credential_agent_log"
fi

create_store_directory

if [ "$FLAG_OPERATION" == "CSR" ]; then
	if [ -f "$certificate" ] && [ $FLAG_FORCE -eq $FLAG_DISABLE ]; then
		exit_script $LOG_WARN "Certificate already present, CSR" $CODE_EXEC_WARN
	else
		issue_certificate
	fi
else
	usage
fi
exit_script $LOG_OK "Commandline Tool Exited" $CODE_EXEC_SUCCESS
