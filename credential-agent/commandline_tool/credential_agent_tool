#!/bin/bash
set -e 

#**********************************************************************************************************************
#**********************************************************************************************************************
#									DHSM_2.0_CREDENTIAL_AGANT_COMMANDLINE_TOOL
#**********************************************************************************************************************
#**********************************************************************************************************************
##=====================================================================================================================
##COMMON_UTILS
##=====================================================================================================================
readonly UTIL_SCRIPT="__PREFIX__/bin/credential-agent/common_utils"

if [ -f $UTIL_SCRIPT ]; then
	source $UTIL_SCRIPT
	log_msg $LOG_DEBUG "Utils included"
else
	exit $CODE_IO_FAILURE
fi

#======================================================================================================================
#VARAIBALE/CONSTANT
#=====================================================================================================================

#VARIABLE
declare FLAG_OPERATION=""
declare FLAG_FORCE=$FLAG_DISABLE
declare CRED_CONF_FILE="__PREFIX__/etc/credential_agent.ini"

#=====================================================================================================================


read_conf_file()
{
	if [ -f "$CRED_CONF_FILE" ]; then
		#log_msg $LOG_DEBUG "Configuration file :$CRED_CONF_FILE"
		source $CRED_CONF_FILE
	else 
		exit_script $LOG_ERROR "Invalid configuration file path: $CRED_CONF_FILE" $CODE_IO_FAILURE
	fi
}

parse_cert_output()
{
	if [ -f "$csr_output" ]; then
		#log_msg $LOG_DEBUG "file is present"
		if [ $(cat $csr_output | sed -e '/success/p' | wc -l) -eq 1 ]; then
			csr_response_cert=$(cat $csr_output | sed -e 's/^.*certificate":"\(.*\)"}}/\1/'  -e 's/\\n/\n/g' >  $certificate)
		else
			response=$(<$csr_output)
			exit_script $LOG_ERROR "Command Response: $response, execution" $CODE_EXEC_ERROR
		fi
	else
		exit_script $LOG_ERROR "CSR command execution failed" $CODE_EXEC_ERROR
	fi
}

create_store_directory()
{
	mkdir -p $store_dir
}

gen_and_get_csr_buf()
{
	local gen_csr_file="openssl req -newkey $keytype:$keysize -nodes -keyout $certificate_key -out $csr \
		-outform pem -subj \"$request_params\" &> /dev/null"
	$(check_last_cmd_exec_status "$gen_csr_file" $EXEC_RULE_ABORT "CSR Generation" $CODE_OPENSSL_ERROR)
	chmod 777 $csr
	local csr_content=$(cat $csr | tr '\r\n' '@' | sed -e 's/@/\\n/g' )
	echo "$csr_content"
}

get_cert_buf()
{
	local cert_content=$(cat $certificate | tr '\r\n' '@' | sed -e 's/@/\\n/g' )
	echo "$cert_content"
}

issue_certificate()
{
	local csr_content=$(gen_and_get_csr_buf)
	local issue_cert_cmd="curl -X POST \"https://$server:$port/v1/csr/\" \
				  -H 'Content-Type: application/json' \
				  -H 'Accept: application/json' \
				  -H 'Authorization: Bearer $token' \
				  -d'{\"certificate_request\":\"$csr_content\"}' \
				  -k > $csr_output"
	#log_msg $LOG_DEBUG "$issue_cert_cmd"
	$(check_last_cmd_exec_status "$issue_cert_cmd" $EXEC_RULE_ABORT "CS CSR Request" $CODE_EXEC_ERROR)
	parse_cert_output 
	exit_script $LOG_OK "Issue Certificate" $CODE_EXEC_SUCCESS
}
renew_certificate()
{
	local is_cert_abt_to_exp="openssl x509 -checkend 86400 -noout -in $certificate"
	$(check_last_cmd_exec_status "$is_cert_abt_to_exp" $EXEC_RULE_WARN "Certificate already expired" $CODE_OPENSSL_ERROR)
	if [ $FLAG_FORCE -eq $FLAG_DISABLE ]; then
		exit_script $LOG_WARN "Certificate is vaild for one more day" $CODE_EXEC_ERROR
	fi
	local csr_content=$(gen_and_get_csr_buf)
	local cert_content=$(get_cert_buf)
	local renew_cert_cmd="curl -X POST \"https://$server:$port/v1/csr/\" \
						 -H 'Content-Type: application/json' \
						 -H 'Accept: application/json' \
						 -d '{\"certificate_request\":\"$csr_content\", \"certificate\":\"$cert_content\" }' \
						 -k > $csr_output"
	check_last_cmd_exec_status "$renew_cert_cmd" $EXEC_RULE_ABORT "Renew Certificate with Credential Service" $CODE_EXEC_ERROR
	parse_cert_output 
	exit_script $LOG_OK "Renew Certificate" $CODE_EXEC_SUCCESS
}

usage()
{
	log_msg $LOG_WARN "$0 [ --get-certificate | --renew-certificate ] [--force] [--verbose] \
							   [ --config <pathnanme-to-configuration-file> ]"	
	exit_script $LOG_WARN "Invalid commandline args" $CODE_PARSE_ERROR
}


lock 200 $(basename $0) || exit $CODE_CONCURRENCY_ERROR
trap 'send_status' 1 2 3 6
while [ "$1" != "" ]; do
	case $1 in
		--get-certificate )     FLAG_OPERATION="CSR"
								;;
		--renew-certificate )   FLAG_OPERATION="RENEW"
								;;
		--force )     			FLAG_FORCE=$FLAG_ENABLE
								;;
		--verbose )   			set_log $FLAG_ENABLE
								;;
		--config )   			shift
								CRED_CONF_FILE=$1
								;;
		-h | --help )           usage
								;;
		*)                      usage
	esac
	shift
done

read_conf_file
log_var=$(get_log)
if [[ $log_var -eq $FLAG_ENABLE ]]; then
	set_log_file "$credential_agent_log"
fi

create_store_directory

if [ "$FLAG_OPERATION" == "CSR" ]; then
	if [ -f "$certificate" ] && [ $FLAG_FORCE -eq $FLAG_DISABLE ]; then
		exit_script $LOG_WARN "Certificate already present, CSR" $CODE_EXEC_WARN
	else
		issue_certificate
	fi
elif [ "$FLAG_OPERATION" == "RENEW" ]; then
	if [ -f "$certificate" ]; then
		renew_certificate
	else
		exit_script $LOG_ERROR "Certificate not present, Renew" $CODE_EXEC_WARN
	fi
else
	usage
fi
exit_script $LOG_OK "Commandline Tool Exited" $CODE_EXEC_SUCCESS
