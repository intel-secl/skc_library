diff --git a/src/p11Sample/p11SgxSample.cpp b/src/p11Sample/p11SgxSample.cpp
index 9c7d501..02f0201 100644
--- a/src/p11Sample/p11SgxSample.cpp
+++ b/src/p11Sample/p11SgxSample.cpp
@@ -55,6 +55,8 @@ void Sleep_App(unsigned milliseconds)
 #include <cstring>
 #include <dlfcn.h>
 
+void print_quote_details(sgx_quote_t *sgxQuote);
+
 void Sleep_App(unsigned milliseconds)
 {
     usleep(milliseconds * 1000); // takes microseconds
@@ -2545,6 +2547,7 @@ bool customQuoteEpid(CK_MECHANISM_TYPE     mechanismType,
 
         sgx_quote_t* sgxQuote  = reinterpret_cast<sgx_quote_t*>(quotePublicKey.data() + fullPublicKeySize);
         uint32_t     quoteSize = quotePublicKeyLen - fullPublicKeySize;
+	print_quote_details(sgxQuote);
 
         std::vector<CK_BYTE> quote;
         quote.resize(quoteSize);
@@ -2640,6 +2643,8 @@ bool customQuoteEcdsa(CK_MECHANISM_TYPE     mechanismType,
         sgx_quote_t* sgxQuote  = reinterpret_cast<sgx_quote_t*>(quotePublicKey.data() + fullPublicKeySize);
         uint32_t     quoteSize = quotePublicKeyLen - fullPublicKeySize;
 
+	print_quote_details(sgxQuote);
+
         std::vector<CK_BYTE> quote;
         quote.resize(quoteSize);
 
@@ -2884,4 +2889,50 @@ bool eccSignVerifyTests(std::string curveName, CK_SESSION_HANDLE hSession, std::
     C_DestroyObject(hSession, ecPrivateKey);
 
     return result;
-}
\ No newline at end of file
+}
+void print_quote_details(sgx_quote_t *sgxQuote){
+
+	printf("SGX_ISSUER[size:%d]:", sizeof(sgxQuote->report_body.mr_signer.m));
+	int k=0;
+	for( ;k<sizeof(sgxQuote->report_body.mr_signer.m); k++)
+	{
+		printf("%02x", sgxQuote->report_body.mr_signer.m[k]);
+	}
+	printf("\n");
+	printf("SGX_MEASUREMENT[size:%d]:", sizeof(sgxQuote->report_body.mr_enclave.m));
+	k=0;
+	for( ;k<sizeof(sgxQuote->report_body.mr_enclave.m); k++)
+	{
+		printf("%02x", sgxQuote->report_body.mr_enclave.m[k]);
+	}
+	printf("\n");
+
+	printf("SGX_CONFIG_ID[size:%d]:", sizeof(sgxQuote->report_body.config_id));
+	k=0;
+	for( ;k<sizeof(sgxQuote->report_body.config_id); k++)
+	{
+		printf("%02x", sgxQuote->report_body.config_id[k]);
+	}
+	printf("\n");
+
+	printf("SGX_PRODUCT_ID[size:%d]:",sizeof(sgxQuote->report_body.isv_prod_id));
+	printf("%02x", sgxQuote->report_body.isv_prod_id);
+	printf("\n");
+
+	printf("SGX_EXT_PRODUCT_ID[size:%d]:",sizeof(sgxQuote->report_body.isv_ext_prod_id));
+	k=0;
+	for( ;k<sizeof(sgxQuote->report_body.isv_ext_prod_id); k++)
+	{
+		printf("%02x", sgxQuote->report_body.isv_ext_prod_id[k]);
+	}
+	printf("\n");
+
+	printf("SGX_CONFIG_ID_SVN[size:%d]:",sizeof(sgxQuote->report_body.config_svn));
+	printf("%02x", sgxQuote->report_body.config_svn);
+	printf("\n");
+
+	printf("SGX_ENCLAVE_SVN[size:%d]:",sizeof(sgxQuote->report_body.isv_svn));
+	printf("%01x", sgxQuote->report_body.isv_svn);
+	printf("\n");
+
+}
