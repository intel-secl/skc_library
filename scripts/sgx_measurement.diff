diff --git a/src/p11Sample/p11SgxSample.cpp b/src/p11Sample/p11SgxSample.cpp
index 2a6442e..abbb238 100644
--- a/src/p11Sample/p11SgxSample.cpp
+++ b/src/p11Sample/p11SgxSample.cpp
@@ -61,6 +61,7 @@ void Sleep_App(unsigned milliseconds)
 }
 #endif
 
+void print_quote_details(sgx_quote_t *sgxQuote);
 void unloadLibrary(void * p11ProviderHandle)
 {
     if (p11ProviderHandle)
@@ -2669,6 +2670,9 @@ bool customQuoteEpid(CK_MECHANISM_TYPE     mechanismType,
         uint32_t fullPublicKeySize = sizeof(CK_RSA_PUBLIC_KEY_PARAMS) + rsaPublicKeyParams->ulModulusLen + rsaPublicKeyParams->ulExponentLen;
 
         sgx_quote_t* sgxQuote  = reinterpret_cast<sgx_quote_t*>(quotePublicKey.data() + fullPublicKeySize);
+	print_quote_details(sgxQuote);
+
+
         uint32_t     quoteSize = quotePublicKeyLen - fullPublicKeySize;
 
         std::vector<CK_BYTE> quote;
@@ -2763,6 +2767,7 @@ bool customQuoteEcdsa(CK_MECHANISM_TYPE     mechanismType,
         uint32_t fullPublicKeySize = sizeof(CK_RSA_PUBLIC_KEY_PARAMS) + rsaPublicKeyParams->ulModulusLen + rsaPublicKeyParams->ulExponentLen;
 
         sgx_quote_t* sgxQuote  = reinterpret_cast<sgx_quote_t*>(quotePublicKey.data() + fullPublicKeySize);
+	print_quote_details(sgxQuote);
         uint32_t     quoteSize = quotePublicKeyLen - fullPublicKeySize;
 
         std::vector<CK_BYTE> quote;
@@ -2847,3 +2852,49 @@ bool findObjects(CK_SESSION_HANDLE hSession, std::string& errorMessage)
     return result;
 }
 
+void print_quote_details(sgx_quote_t *sgxQuote){
+
+	printf("SGX_ISSUER[size:%d]:", sizeof(sgxQuote->report_body.mr_signer.m));
+	int k=0;
+	for( ;k<sizeof(sgxQuote->report_body.mr_signer.m); k++)
+	{
+		printf("%02x", sgxQuote->report_body.mr_signer.m[k]);
+	}
+	printf("\n");
+	printf("SGX_MEASUREMENT[size:%d]:", sizeof(sgxQuote->report_body.mr_enclave.m));
+	k=0;
+	for( ;k<sizeof(sgxQuote->report_body.mr_enclave.m); k++)
+	{
+		printf("%02x", sgxQuote->report_body.mr_enclave.m[k]);
+	}
+	printf("\n");
+
+	printf("SGX_CONFIG_ID[size:%d]:", sizeof(sgxQuote->report_body.config_id));
+	k=0;
+	for( ;k<sizeof(sgxQuote->report_body.config_id); k++)
+	{
+		printf("%02x", sgxQuote->report_body.config_id[k]);
+	}
+	printf("\n");
+
+	printf("SGX_PRODUCT_ID[size:%d]:",sizeof(sgxQuote->report_body.isv_prod_id));
+	printf("%02x", sgxQuote->report_body.isv_prod_id);
+	printf("\n");
+
+	printf("SGX_EXT_PRODUCT_ID[size:%d]:",sizeof(sgxQuote->report_body.isv_ext_prod_id));
+	k=0;
+	for( ;k<sizeof(sgxQuote->report_body.isv_ext_prod_id); k++)
+	{
+		printf("%02x", sgxQuote->report_body.isv_ext_prod_id[k]);
+	}
+	printf("\n");
+
+	printf("SGX_CONFIG_ID_SVN[size:%d]:",sizeof(sgxQuote->report_body.config_svn));
+	printf("%02x", sgxQuote->report_body.config_svn);
+	printf("\n");
+
+	printf("SGX_ENCLAVE_SVN[size:%d]:",sizeof(sgxQuote->report_body.isv_svn));
+	printf("%01x", sgxQuote->report_body.isv_svn);
+	printf("\n");
+
+}
