diff -purN SGXDataCenterAttestationPrimitives/QuoteVerification/Src/AttestationApp/src/AttestationLibraryAdapter.cpp SGXDataCenterAttestationPrimitives_/QuoteVerification/Src/AttestationApp/src/AttestationLibraryAdapter.cpp
--- SGXDataCenterAttestationPrimitives/QuoteVerification/Src/AttestationApp/src/AttestationLibraryAdapter.cpp	2019-06-24 12:26:55.352632012 -0700
+++ SGXDataCenterAttestationPrimitives_/QuoteVerification/Src/AttestationApp/src/AttestationLibraryAdapter.cpp	2019-06-13 00:07:17.000000000 -0700
@@ -27,7 +27,7 @@
 */
 
 #include "AttestationLibraryAdapter.h"
-
+#include <iostream>
 #include <array>
 
 namespace intel { namespace sgx { namespace qvl {
@@ -43,6 +43,18 @@ Status AttestationLibraryAdapter::verify
                                               const std::string& qeIdentity) const
 {
     const auto qeIdentityRawPtr = qeIdentity.empty() ? nullptr : qeIdentity.c_str();
+    uint32_t qcDataSize = 0;
+    ::sgxAttestationGetQECertificationDataSize(quote.data(), quote.size(), & qcDataSize);
+
+        if (qcDataSize != 0)
+    {
+        std::vector<uint8_t> qcd;
+        qcd.resize(qcDataSize);
+        uint16_t qcdType;
+        ::sgxAttestationGetQECertificationData(quote.data(), quote.size(), qcDataSize, qcd.data(), &qcdType);
+        std::cout << "Cert Data Type: " << qcdType << std::endl;
+    }
+
     return ::sgxAttestationVerifyQuote(quote.data(), quote.size(), pckCertChain.c_str(), pckCrl.c_str(), tcbInfo.c_str(), qeIdentityRawPtr);
 }
 
diff -purN SGXDataCenterAttestationPrimitives/QuoteVerification/Src/AttestationLibrary/src/CertVerification/CertificateChain.cpp SGXDataCenterAttestationPrimitives_/QuoteVerification/Src/AttestationLibrary/src/CertVerification/CertificateChain.cpp
--- SGXDataCenterAttestationPrimitives/QuoteVerification/Src/AttestationLibrary/src/CertVerification/CertificateChain.cpp	2019-06-24 12:26:55.353632011 -0700
+++ SGXDataCenterAttestationPrimitives_/QuoteVerification/Src/AttestationLibrary/src/CertVerification/CertificateChain.cpp	2019-06-13 00:07:17.000000000 -0700
@@ -26,6 +26,9 @@
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
+#include <iostream>
+#include <sstream>
+
 #include "CertificateChain.h"
 #include "X509Constants.h"
 #include <algorithm>
@@ -45,6 +48,8 @@ bool CertificateChain::parse(const std::
         {
             // any cert in chain has wrong format
             // then whole chain should be considered invalid
+            std::cout << "CertificateChain failed \n";
+            std::cout << cert << "\n";
             return false;
         }
 
diff -purN SGXDataCenterAttestationPrimitives/QuoteVerification/Src/AttestationLibrary/src/PckParser/CertStore.cpp SGXDataCenterAttestationPrimitives_/QuoteVerification/Src/AttestationLibrary/src/PckParser/CertStore.cpp
--- SGXDataCenterAttestationPrimitives/QuoteVerification/Src/AttestationLibrary/src/PckParser/CertStore.cpp	2019-06-24 12:26:55.354632011 -0700
+++ SGXDataCenterAttestationPrimitives_/QuoteVerification/Src/AttestationLibrary/src/PckParser/CertStore.cpp	2019-06-13 00:07:17.000000000 -0700
@@ -27,6 +27,9 @@
 */
 
 
+#include <iostream>
+#include <sstream>
+
 #include "CertStore.h"
 #include "FormatException.h"
 #include <OpensslHelpers/Assert.h>
@@ -63,13 +66,21 @@ bool CertStore::parse(const std::string&
         QVL_ASSERT(_x509);
        
         _serialNumber = pckparser::getSerialNumber(*_x509);
+        std::cout << "GotSerialNumber\n";
         _pubKey = pckparser::getPubKey(*_x509);
+        std::cout << "GotPubKey\n";
         _subject = pckparser::getSubject(*_x509);
+        std::cout << "GotSubject\n";
         _issuer = pckparser::getIssuer(*_x509);
+        std::cout << "GotIssuer\n";
         _validity = pckparser::getValidity(*_x509);
+        std::cout << "GotValidity\n";
         _extensions = pckparser::getExtensions(*_x509);
+        std::cout << "GotExtensions\n";
         _sgxExtensions = pckparser::getSGXExtensions(_extensions);
+        std::cout << "GotSGXExtensions\n";
         _signature = pckparser::getSignature(*_x509);
+        std::cout << "GotSignature\n";
     }
     catch(const FormatException&)
     {
diff -purN SGXDataCenterAttestationPrimitives/QuoteVerification/Src/AttestationLibrary/src/PckParser/PckParser.cpp SGXDataCenterAttestationPrimitives_/QuoteVerification/Src/AttestationLibrary/src/PckParser/PckParser.cpp
--- SGXDataCenterAttestationPrimitives/QuoteVerification/Src/AttestationLibrary/src/PckParser/PckParser.cpp	2019-06-24 12:26:55.354632011 -0700
+++ SGXDataCenterAttestationPrimitives_/QuoteVerification/Src/AttestationLibrary/src/PckParser/PckParser.cpp	2019-06-13 00:07:17.000000000 -0700
@@ -26,6 +26,9 @@
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
+#include <iostream>
+#include <sstream>
+
 #include "PckParser.h"
 
 #include <cstring>
@@ -666,6 +669,7 @@ crypto::EC_KEY_uptr getPubKey(const X509
 
     if(!pkey)
     {
+        std::cout << "getPubKey:  X509_get0_pubkey() Failed.\n";
         throw FormatException(getLastError());
     }
 
@@ -675,6 +679,7 @@ crypto::EC_KEY_uptr getPubKey(const X509
     {
         // PCK cert family are expected to have EC key
         // so if we couldn't parse to EC key then FormatException
+         std::cout << "getPubKey:  crypt::make_unique() Failed.\n";
         throw FormatException(getLastError());
     }
 
diff -purN SGXDataCenterAttestationPrimitives/QuoteVerification/Src/AttestationLibrary/src/QuoteVerification.cpp SGXDataCenterAttestationPrimitives_/QuoteVerification/Src/AttestationLibrary/src/QuoteVerification.cpp
--- SGXDataCenterAttestationPrimitives/QuoteVerification/Src/AttestationLibrary/src/QuoteVerification.cpp	2019-06-24 12:26:55.355632011 -0700
+++ SGXDataCenterAttestationPrimitives_/QuoteVerification/Src/AttestationLibrary/src/QuoteVerification.cpp	2019-06-13 00:07:17.000000000 -0700
@@ -26,6 +26,8 @@
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
+#include <iostream>
+#include <sstream>
 
 #include "OpensslHelpers/OpensslInit.h"
 #include "PckParser/CrlStore.h"
@@ -98,7 +100,10 @@ Status sgxAttestationVerifyPCKCertificat
     qvl::CertificateChain chain;
     if(!chain.parse(pemCertChain) || chain.length() != EXPECTED_CERTIFICATE_COUNT_IN_PCK_CHAIN)
     {
-        return STATUS_UNSUPPORTED_CERT_FORMAT;
+        std::cout << "sgxAttestationVerifyPCKCertificate" << "=" << chain.length() << "\n";
+        std::cout << "EXPECTED_CERTIFICATE_COUNT_IN_PCK_CHAIN" << "=" << EXPECTED_CERTIFICATE_COUNT_IN_PCK_CHAIN << "\n";
+        std::cout << "pemCertChain:  " << pemCertChain << "\n";
+    return STATUS_UNSUPPORTED_CERT_FORMAT;
     }
 
     qvl::pckparser::CrlStore rootCaCrl, intermediateCrl;
@@ -347,6 +352,9 @@ Status sgxAttestationGetQECertificationD
     }
 
     const auto quoteDataType = quoteQeCertData.type;
+    std::cout << "*****************************************************" << std::flush;
+    std::cout << "Cert Data Type: " << quoteDataType << std::endl << std::flush;
+    std::cout << "*****************************************************" << std::flush;
     if(std::find(qvl::constants::SUPPORTED_PCK_IDS.cbegin(), qvl::constants::SUPPORTED_PCK_IDS.cend(), quoteDataType) == qvl::constants::SUPPORTED_PCK_IDS.cend())
     {
         return STATUS_UNSUPPORTED_QE_CERTIFICATION_DATA_TYPE;
